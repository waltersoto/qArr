(function () { var isFunction = "function", isUndefined = "undefined", isString = "string"; var qArr = function (arr) { var arrCopy = []; if (arr.constructor !== Array) { throw new Error("This object only works with Arrays"); } arrCopy = arr.slice(0); this.where = function (fn) { var sub = []; (function (a) { for (var i = 0, max = a.length; i < max; i++) { if (fn(arrCopy[i], i)) { sub.push(arrCopy[i]); } } })(arrCopy); arrCopy = sub; return this; }; this.forEach = function (fn) { if (arrCopy.length > 0 && typeof fn === isFunction) { for (var fi = 0, fm = arrCopy.length; fi < fm; fi++) { fn(arrCopy[fi], fi); } } return this; }; this.select = function (fn) { var sub = []; (function (a) { for (var i = 0, max = a.length; i < max; i++) { sub.push(fn(a[i], i)); } })(arrCopy); arrCopy = sub; return this; }; this.orderByDescending = function (fn) { var sub = []; if (arrCopy.length > 0) { if (typeof arrCopy[0] === isString) { sub = arrCopy.sort().reverse(); } else { sub = arrCopy.sort(function (a, b) { if (typeof fn !== isFunction) { if (!isNaN(parseFloat(a))) { return -(parseFloat(a) - parseFloat(b)); } return -(a.toUpperCase().localeCompare(b.toUpperCase())); } if (!isNaN(parseFloat(fn(a)))) { return -(parseFloat(fn(a)) - parseFloat(fn(b))); } return -fn(a).toUpperCase().localeCompare(fn(b).toUpperCase()); }); } arrCopy = sub; } return this; }; this.orderBy = function (fn) { var sub = []; if (arrCopy.length > 0) { if (typeof arrCopy[0] === isString) { sub = arrCopy.sort(); } else { sub = arrCopy.sort(function (a, b) { if (typeof fn !== isFunction) { if (!isNaN(parseFloat(a))) { return parseFloat(a) - parseFloat(b); } return a.toUpperCase().localeCompare(b.toUpperCase()); } if (!isNaN(parseFloat(fn(a)))) { return parseFloat(fn(a)) - parseFloat(fn(b)); } return fn(a).toUpperCase().localeCompare(fn(b).toUpperCase()); }); } arrCopy = sub; } return this; }; this.first = function (fn) { if (typeof fn === isFunction) { this.where(fn); } if (arrCopy.length > 0) { return arrCopy[0]; } return null; }; this.last = function (fn) { if (typeof fn === isFunction) { this.where(fn); } if (arrCopy.length > 0) { return arrCopy[arrCopy.length - 1]; } return null; }; this.single = function (fn) { this.where(fn); if (arrCopy.length === 1) { return arrCopy[0]; } return null; }; this.elementAt = function (index) { if (arrCopy.length > index) { return arrCopy[index]; } return null; }; this.count = function (fn) { if (typeof fn !== isFunction) { return arrCopy.length; } return this.where(fn).toArray().length; }; this.skip = function (num) { if (arrCopy.length > 0 && num > 0) { if (arrCopy.length > num) { arrCopy = arrCopy.slice(num); } } return this; }; this.take = function (num) { if (arrCopy.length > 0 && num > 0) { if (arrCopy.length > num) { arrCopy = arrCopy.slice(0, num); } } return this; }; this.union = function (nArr) { arrCopy = arrCopy.concat(nArr); this.distinct(); return this; }; this.page = function (pg, size) { if (typeof size === isUndefined) { size = 10; } if (arrCopy.length > 0) { arrCopy = this.skip((pg - 1) * size).take(size).toArray(); } return this; }; var contains = function (array, o) { for (var s = 0, sm = array.length; s < sm; s++) { if (JSON.stringify(array[s]) === JSON.stringify(o)) { return true; } } return false; }; this.contains = function (item) { return contains(arrCopy, item); }; var findAny = function (array, fn) { for (var i = 0, m = array.length; i < m; i++) { if (fn(array[i])) { return true; } } return false; }; this.any = function (fn) { return findAny(arrCopy, fn); }; this.distinct = function () { var uni = []; if (arrCopy.length > 0) { for (var i = 0, m = arrCopy.length; i < m; i++) { if (!contains(uni, arrCopy[i])) { uni.push(arrCopy[i]); } } arrCopy = uni.slice(0); } return this; }; this.shuffle = function () { if (arrCopy.length > 0) { var n = arrCopy.length; while (n) { var j = Math.floor(Math.random() * (--n + 1)); var tempN = arrCopy[n]; var tempJ = arrCopy[j]; arrCopy[n] = tempJ; arrCopy[j] = tempN; } } return this; }; var findIndex = function (fn, last) { var index = -1; for (var i = 0, max = arrCopy.length; i < max; i++) { if (fn(arrCopy[i])) { index = i; if (!last) { break; } } } return index; }; this.lastIndexOf = function (fn) { return findIndex(fn, true); }; this.indexOf = function (fn) { return findIndex(fn, false); }; this.sum = function (asIntegers) { var count = 0; var asInt = typeof asIntegers !== isUndefined; if (arrCopy.length > 0) { for (var i = 0, m = arrCopy.length; i < m; i++) { if (!isNaN(arrCopy[i])) { if (asInt) { count += parseInt(arrCopy[i]); } else { count += parseFloat(arrCopy[i]); } } } } return count; }; this.groupBy = function (fn) { var uni = []; if (arrCopy.length > 0) { for (var i = 0, m = arrCopy.length; i < m; i++) { if (!contains(uni, fn(arrCopy[i]))) { uni.push({ key: fn(arrCopy[i]), obj: arrCopy[i] }); } } var g = []; for (var k = 0, mk = uni.length; k < mk; k++) { if (!findAny(g, function (n) { return n.key === uni[k].key; })) { g.push({ key: uni[k].key, item: [] }); } var index = qA(g).indexOf(function (n) { return n.key === uni[k].key; }); if (index !== -1 && index < uni.length) { g[index].item.push(qA(uni).elementAt(k).obj); } } arrCopy = g.slice(0); } return this; }; this.except = function (excludeArr) { if (excludeArr.constructor === Array) { var uni = []; if (arrCopy.length > 0) { for (var i = 0, m = arrCopy.length; i < m; i++) { if (!contains(excludeArr, arrCopy[i])) { uni.push(arrCopy[i]); } } arrCopy = uni.slice(0); } } return this; }; this.toArray = function () { return arrCopy; }; }; var qA = function (arr) { return new qArr(arr); }; if (typeof window !== isUndefined) { if (!window.qA) { window.qA = qA; } } else { if (typeof module !== isUndefined && module.exports) { module.exports = qA; } } })();